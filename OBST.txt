
 
#include<iostream>

using namespace std;

/*struct node

{

    int data;

    node *left,*right;

};

node *construct(int r[5][5],int i,int j)

{

    node *p;

    if(r[i][j]==0)

    return NULL;

    else

    p=new node;

    p->data=r[i][j];

    p->left=construct(r,i,r[i][j]-1);

    p->right=construct(r,r[i][j]+1,j);

    return p;

    

}*/

int find(int c[5][5],int i,int j)

{

    int min=999;

    int l,k,cost;

    

    for(k=i;k<=j;k++)//C12   i=1  j=2   ,K=1,K=2

    {

        cost=c[i][k-1]+c[k+1][j];//2

        if(cost<min)//2<3

        {

            min=cost;//2

            l=k;//2

        }

    }

    return l;

}

//node * 

void optimal(int p[10],int q[10],int n)

{

    int w[5][5],c[5][5],r[5][5],i,j,k;

    node *root;

    for(i=0;i<=n;i++)

        for(j=0;j<=n;j++)

            c[i][j]=w[i][j]=r[i][j]=0;

    for(i=1;i<=n;i++)

    {

        w[i][i]=q[i-1]+q[i]+p[i]; //W22=Q1+Q2+P2    i=1  i-1=1-1=0

        c[i][i]= w[i][i];

        r[i][i]=i;

    }

    

    for(int step=2;step<=n;step++)//s2 =w12,W23,W34   ,S3=W13,W24,  w14

    {

        for(i=1;i<=n-step+1;i++)   //i=1,j=3

        {

            j=i+step-1;//J=1+3-1=3

            w[i][j]=w[i][j-1]+p[j]+q[j];//w12

            k=find(c,i,j);//2

            c[i][j]=w[i][j]+c[i][k-1]+c[k+1][j];

            r[i][j]=k;

        }

    }

///===========print OBST

  for(i=1;i<=n;i++)

    {

	j=i;

	cout<<w[i][j]<<c[i][j]<<r[i][j]

     }

}

for(int step=2;step<=n;step++)

{

        for(i=1;i<=n-step+1;i++)   //i=1,j=3

        {

            j=i+step-1;//J=1+3-1=3

	cout<<w[i][j]<<c[i][j]<<r[i][j]

      }

 }

cout<<”Mnimum Csost of BST”<<cost[1][n];

//cout<<”Root of OBST”<<r[1][n];

 //root=construct(r,1,n);

  //  return root;

}

/*void disp(node *root)

{

    if(root!=NULL)

    {

        

        disp(root->left);    

        cout<<root->data;

         disp(root->right);  

    }

    

}*/

int main()

{

    int p[10],q[10],i,n;

    node *root=NULL;

    char wrd[5][10];

    cout<<"Enter number";

    cin>>n;

    cout<<"Enter words";

    for(i=1;i<=n;i++)

    cin>>wrd[i];

    cout<<"Enter number prob p";

    for(i=1;i<=n;i++)

    cin>>p[i];

     cout<<"Enter number prob q";

    for(i=0;i<=n;i++)

    cin>>q[i];

    //root=

    optimal(p,q,n);

   return 0; 

}
