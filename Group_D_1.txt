
     



#include <iostream>
using namespace std;

class OBST
{
private:
    float a[20], b[20], wt[20][20], c[20][20];
    int r[20][20], n;

public:
    void readProbabilities();
    void computeOBST();
    void printOBST();
    void printTree(int l1, int r1);
};

void OBST::readProbabilities()
{
    int i;
    cout << "\nEnter the no. of nodes: ";
    cin >> n;

    cout << "\nEnter the probability for successful se:\n";
    for (i = 1; i <= n; i++)
    {
        cout << "p[" << i << "]: l
        cin >> a[i];
    }

    cout << "\nEnter the probability for unsuccessful search:\n";
    for (i = 0; i <= n; i++)
    {
        cout << "q[" << i << "]: ";
        cin >> b[i];
    }
}

void OBST::computeOBST()
{
    int i, j, k, l, min;
    for (i = 0; i < n; i++)
    {
        // Initialization
        c[i][i] = 0.0;
        r[i][i] = 0;
        wt[i][i] = b[i];

        // For j-i=1 can be j=i+1
        wt[i][i + 1] = b[i] + b[i + 1] + a[i + 1];
        c[i][i + 1] = b[i] + b[i + 1] + a[i + 1];
        r[i][i + 1] = i + 1;
    }
    c[n][n] = 0.0;
    r[n][n] = 0;
    wt[n][n] = b[n];

    // For j-i=2,3,4....,n
    for (i = 2; i <= n; i++)
    {
        for (j = 0; j <= n - i; j++)
        {
            wt[j][j + i] = b[j + i] + a[j + i] + wt[j][j + i - 1];
            c[j][j + i] = 9999;
            for (l = j + 1; l <= j + i; l++)
            {
                if (c[j][j + i] > (c[j][l - 1] + c[l][j + i]))
                {
                    c[j][j + i] = c[j][l - 1] + c[l][j + i];
                    r[j][j + i] = l;
                }
            }
            c[j][j + i] += wt[j][j + i];
        }
        cout << endl;
    }
}

void OBST::printOBST()
{
    cout << "\n\nOptimal BST is :: ";
    cout << "\nw[0][" << n << "] :: " << wt[0][n];
    cout << "\nc[0][" << n << "] :: " << c[0][n];
    cout << "\nr[0][" << n << "] :: " << r[0][n] << endl;

    printTree(0, n);
}

void OBST::printTree(int l1, int r1)
{
    if (l1 >= r1)
        return;

    if (r[l1][r[l1][r1] - 1] != 0)
        cout << "\nLeft child of " << r[l1][r1] << " :: " << r[l1][r[l1][r1] - 1];
    if (r[r[l1][r1]][r1] != 0)
        cout << "\nRight child of " << r[l1][r1] << " :: " << r[r[l1][r1]][r1];

    printTree(l1, r[l1][r1] - 1);
    printTree(r[l1][r1], r1);
}

int main()
{
    OBST obst;
    int choice;
    while (true)
    {
        cout << "\n*** MENU ***\n";
        cout << "1. Enter keys and access probabilities\n";
        cout << "2. Compute Optimal Binary Search Tree\n";
        cout << "3. Print Optimal Binary Search Tree\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            obst.readProbabilities();
            break;
        case 2:
            obst.computeOBST();
            cout << "The OBST has been computed" << endl;
            break;
        case 3:
            obst.printOBST();
            break;
        case 4:
            cout << "Exiting the program.\n";
            return 0;
        default:
            cout << "Invalid choice. Please try again.\n";
        }
    }
}
