#include <iostream>
#include <cstring>

using namespace std;

struct Node {
    char name[100];
    Node* children;
    Node* nextSibling;

    Node(const char* name) {
        strcpy(this->name, name);
        children = nullptr;
        nextSibling = nullptr;
    }
};

class Tree {
private:
    Node* root;

public:
    Tree() {
        root = nullptr;
    }

    void addNode(Node* parent, Node* child) {
        if (parent->children == nullptr) {
            parent->children = child;
        } else {
            Node* sibling = parent->children;
            while (sibling->nextSibling != nullptr) {
                sibling = sibling->nextSibling;
            }
            sibling->nextSibling = child;
        }
    }

    void printNodes(Node* node, int depth) {
        for (int i = 0; i < depth; i++) {
            cout << "-";
        }
        cout << node->name << endl;

        Node* child = node->children;
        while (child != nullptr) {
            printNodes(child, depth + 1);
            child = child->nextSibling;
        }
    }

    void addChapter() {
        char chapterName[100];
        cout << "Enter chapter name: ";
        cin.ignore();
        cin.getline(chapterName, sizeof(chapterName));

        Node* chapter = new Node(chapterName);
        if (root == nullptr) {
            root = chapter;
        } else {
            addNode(root, chapter);
        }
    }

    void addSection() {
        if (root == nullptr) {
            cout << "No chapters found. Please add a chapter first." << endl;
            return;
        }

        char chapterName[100];
        cout << "Enter chapter name: ";
        cin.ignore();
        cin.getline(chapterName, sizeof(chapterName));

        Node* chapter = root;
        while (chapter != nullptr && strcmp(chapter->name, chapterName) != 0) {
            chapter = chapter->nextSibling;
        }

        if (chapter == nullptr) {
            cout << "Chapter not found." << endl;
            return;
        }

        char sectionName[100];
        cout << "Enter section name: ";
        cin.getline(sectionName, sizeof(sectionName));

        Node* section = new Node(sectionName);
        addNode(chapter, section);
    }

    void addSubsection() {
        if (root == nullptr) {
            cout << "No chapters found. Please add a chapter first." << endl;
            return;
        }

        char chapterName[100];
        cout << "Enter chapter name: ";
        cin.ignore();
        cin.getline(chapterName, sizeof(chapterName));

        Node* chapter = root;
        while (chapter != nullptr && strcmp(chapter->name, chapterName) != 0) {
            chapter = chapter->nextSibling;
        }

        if (chapter == nullptr) {
            cout << "Chapter not found." << endl;
            return;
        }

        char sectionName[100];
        cout << "Enter section name: ";
        cin.getline(sectionName, sizeof(sectionName));

        Node* section = chapter->children;
        while (section != nullptr && strcmp(section->name, sectionName) != 0) {
            section = section->nextSibling;
        }

        if (section == nullptr) {
            cout << "Section not found." << endl;
            return;
        }

        char subsectionName[100];
        cout << "Enter subsection name: ";
        cin.getline(subsectionName, sizeof(subsectionName));

        Node* subsection = new Node(subsectionName);
        addNode(section, subsection);
    }

    void printTree() {
        if (root == nullptr) {
            cout << "No nodes found. Please add nodes first." << endl;
            return;
        }

        printNodes(root, 0);
    }
};

int main() {
    Tree book;

    int choice;
    while (true) {
        cout << "Menu:" << endl;
        cout << "1. Add Chapter" << endl;
        cout << "2. Add Section" << endl;
        cout << "3. Add Subsection" << endl;
        cout << "4. Print Tree" << endl;
        cout << "5. Exit" << endl;

        cout << "Enter your choice: ";
        cin >> choice;

        if (choice == 1) {
            book.addChapter();
        } else if (choice == 2) {
            book.addSection();
        } else if (choice == 3) {
            book.addSubsection();
        } else if (choice == 4) {
            book.printTree();
        } else if (choice == 5) {
            break;
        } else {
            cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
